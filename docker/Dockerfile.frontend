# Multi-stage Dockerfile for Kinexus AI Frontend
# Production-ready React application with nginx

# Build stage
FROM node:18-alpine as builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine as production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy environment setup script
COPY docker/env-setup.sh /docker-entrypoint.d/40-env-setup.sh
RUN chmod +x /docker-entrypoint.d/40-env-setup.sh

# Create non-root user for security
RUN addgroup -g 1001 -S kinexus && \
    adduser -S kinexus -u 1001

# Set proper permissions
RUN chown -R kinexus:kinexus /usr/share/nginx/html && \
    chown -R kinexus:kinexus /var/cache/nginx && \
    chown -R kinexus:kinexus /var/log/nginx && \
    chown -R kinexus:kinexus /etc/nginx/conf.d

# Create directories for nginx to run as non-root
RUN touch /var/run/nginx.pid && \
    chown -R kinexus:kinexus /var/run/nginx.pid

# Switch to non-root user
USER kinexus

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]