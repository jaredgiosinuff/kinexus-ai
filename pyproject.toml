[tool.poetry]
name = "kinexus-ai"
version = "1.0.0"
description = "AI-driven document management system for AWS Hackathon"
authors = ["Kinexus AI Team <jared.b.cluff@gmail.com>"]
license = "MIT"
# readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.9"

# Core AWS
boto3 = "1.34.0"
botocore = "1.34.0"

# AWS CDK
aws-cdk-lib = "2.100.0"
constructs = "^10.0.0"

# API & Web Framework
fastapi = "0.104.1"
uvicorn = "0.24.0"
pydantic = {extras = ["email"], version = "2.5.0"}
pydantic-settings = "2.1.0"
httpx = "0.25.2"
python-jose = {extras = ["cryptography"], version = "3.3.0"}
passlib = {extras = ["bcrypt"], version = "1.7.4"}
python-multipart = "0.0.6"
websockets = "12.0"
watchfiles = "0.21.0"

# AI/ML
anthropic = "0.7.1"
langchain = "0.0.335"
openai = "1.3.0"

# Core ML dependencies
networkx = "^3.0"
scikit-learn = "^1.3.0"
tiktoken = "^0.5.0"

# Database
sqlalchemy = "2.0.23"
psycopg2-binary = "2.9.9"
alembic = "1.12.1"
asyncpg = "0.29.0"

# Redis and Caching
redis = "5.0.1"
hiredis = "2.2.3"

# MongoDB
pymongo = "4.5.0"

# Utilities
python-dotenv = "1.0.0"
pyyaml = "6.0.1"
structlog = "23.2.0"
tenacity = "8.2.3"
prometheus-client = "0.23.1"
python-json-logger = "3.3.0"
python-dateutil = "2.8.2"
orjson = "3.9.10"
aiofiles = "23.2.1"
uuid = "1.30"
typing-extensions = "4.8.0"
numpy = "^1.24.0"
pandas = "^2.0.0"
requests = "^2.31.0"
aiohttp = "^3.8.0"
asyncio-throttle = "^1.0.0"

# Production Server
gunicorn = "21.2.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "7.4.3"
pytest-asyncio = "0.21.1"
pytest-cov = "4.1.0"
moto = "4.2.7"
responses = "0.24.1"

# Code Quality
black = "25.9.0"
isort = "5.13.2"
ruff = "^0.1.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
bandit = "^1.7.5"
pre-commit = "^3.4.0"

[tool.poetry.group.lambda]
optional = true

[tool.poetry.group.lambda.dependencies]
# Lightweight dependencies for Lambda
boto3 = "1.34.0"
botocore = "1.34.0"
fastapi = "0.104.1"
pydantic = "2.5.0"
httpx = "0.25.2"
anthropic = "0.7.1"
python-jose = {extras = ["cryptography"], version = "3.3.0"}
sqlalchemy = "2.0.23"
psycopg2-binary = "2.9.9"
redis = "5.0.1"
python-dotenv = "1.0.0"
structlog = "23.2.0"
tenacity = "8.2.3"

# Note: GraphRAG removed due to Python version conflicts
# Install separately with: pip install graphrag==0.3.0

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.9"
# Minimal type checking - only catch critical errors
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
namespace_packages = true
explicit_package_bases = true
ignore_missing_imports = true
# Ignore specific error codes that are too strict for existing code
disable_error_code = ["arg-type", "assignment", "return-value", "call-arg", "var-annotated", "attr-defined", "union-attr", "index", "no-any-return", "misc", "syntax", "annotation-unchecked", "import-untyped", "truthy-function", "dict-item", "operator", "valid-type", "list-item", "override"]
exclude = [
    "src/agents/graphrag/"
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]